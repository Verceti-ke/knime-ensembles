/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME GmbH, Konstanz, Germany
 *  Website: http://www.knime.org; Email: contact@knime.org
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 */
package org.knime.core.thrift.workflow.entity;

#foreach( $import in $imports)
import $import;
#end

import org.knime.core.gateway.v0.workflow.entity.${name};
import org.knime.core.gateway.v0.workflow.entity.builder.${name}Builder;

import org.knime.core.thrift.workflow.entity.T${name}.T${name}Builder;

import java.util.stream.Collectors;
import java.util.HashMap;

/**
 *
 * @author Martin Horn, University of Konstanz
 */
public class T${name}FromThrift implements ${name} {

	private final T${name} m_e;

	public T${name}FromThrift(final T${name} e) {
		m_e = e;
	}

#foreach( $field in $fields )
    @Override
    public $field.getType().toString("","") get$field.getName()() {
    	#if($field.getType().isPrimitive())
    	return m_e.get$field.getName()();
    	#elseif($field.getType().isList())
    	return m_e.get$field.getName()().stream().map(l -> new T${field.getType().getTypeParameter(0).toString('','')}FromThrift(l)).collect(Collectors.toList());
    	#elseif($field.getType().isMap())
    	//TODO support non-primitive keys
    	$field.getType().toString("","") res = new HashMap<>();
        m_e.get$field.getName()().entrySet().forEach(e -> res.put(e.getKey(), new T$field.getType().getTypeParameter(1).toString('','')FromThrift(e.getValue())));
    	return res;
    	#else
        return new T${field.getType().toString('','')}FromThrift(m_e.get$field.getName()());
        #end
    }
    
#end

	@Override
    public String toString() {
        return m_e.toString();
    }

    public static class T${name}BuilderFromThrift implements ${name}Builder {
    
		private T${name}Builder m_b;
	
		public T${name}BuilderFromThrift(final T${name}Builder b) {
			m_b = b;
		}
	
        public ${name} build() {
            return new T${name}FromThrift(m_b.build());
        }

#foreach( $field in $fields )
		@Override
        public T${name}BuilderFromThrift set$field.getName()(final ${field.getType().toString('','')} $field.getName()) {
        #if($field.getType().isPrimitive())
        	m_b.set$field.getName()($field.getName());
        #elseif($field.getType().isList())
        	m_b.set$field.getName()(${field.getName()}.stream().map(e -> new T${field.getType().getTypeParameter(0).toString('','')}ToThrift(e)).collect(Collectors.toList()));
        #elseif($field.getType().isMap())
        	//TODO support non-primitive keys
        	$field.getType().toString("T","") map = new HashMap<>();
		    ${field.getName()}.entrySet().forEach(e -> map.put(e.getKey(), new T$field.getType().getTypeParameter(1).toString('','')ToThrift(e.getValue())));
            m_b.set$field.getName()(map);
        #else
        	m_b.set$field.getName()(new T$field.getType().toString("","")ToThrift($field.getName()));
        #end
            return this;
        }
        
#end
    }

}
