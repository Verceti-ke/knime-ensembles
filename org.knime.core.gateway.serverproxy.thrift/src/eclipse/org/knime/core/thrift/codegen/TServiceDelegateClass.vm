/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME GmbH, Konstanz, Germany
 *  Website: http://www.knime.org; Email: contact@knime.org
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 */
package org.knime.core.thrift.workflow.service;

#foreach( $import in $imports)
import $import;
#end

import java.util.stream.Collectors;

import org.knime.core.thrift.workflow.entity.*;
import org.knime.core.gateway.serverproxy.service.Abstract${name};

/**
 * TODO: probably needs to be a singleton class
 *
 * @author Martin Horn, University of Konstanz
 */
public class T${name}Delegate extends Abstract${name} {

    private final T${name} m_service;

    public T${name}Delegate(final T${name} service) {
        m_service = service;
    }
    
#foreach( $method in $methods )
#if($method.getReturnType().isList())
	#set($ret="List<$method.getReturnType().getType()>")
#elseif($method.getReturnType().isVoid())
	#set($ret="void")
#else
	#set($ret="$method.getReturnType().getType()")
#end
	@Override
	public $ret $method.getName()(#foreach($param in $method.getParameters())final $param.getType() $param.getName()#if( $foreach.hasNext ),#end#end) {
		#if($ret!="void") return#end m_service.T$method.getName()(#foreach($param in $method.getParameters())(T$param.getType()) $param.getName()#if( $foreach.hasNext ),#end#end)#if($method.getReturnType().isList()).stream().map(t -> ($method.getReturnType().getType())t).collect(Collectors.toList())#end;
				
	}
	
#end
}