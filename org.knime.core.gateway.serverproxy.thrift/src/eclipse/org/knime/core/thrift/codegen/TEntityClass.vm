/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME GmbH, Konstanz, Germany
 *  Website: http://www.knime.org; Email: contact@knime.org
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 */
package org.knime.core.thrift.workflow.entity;

#foreach( $import in $imports)
import $import;
#end

import com.facebook.swift.codec.ThriftConstructor;
import com.facebook.swift.codec.ThriftField;
import com.facebook.swift.codec.ThriftStruct;

import org.knime.core.gateway.v0.workflow.entity.${name};
import org.knime.core.gateway.v0.workflow.entity.builder.${name}Builder;

import org.knime.core.thrift.workflow.entity.T${name}.T${name}Builder;
import org.knime.core.thrift.workflow.entity.T${name}FromThrift.T${name}BuilderFromThrift;
import org.knime.core.thrift.TEntityBuilderFactory.ThriftEntityBuilder;
import org.knime.core.gateway.v0.workflow.entity.builder.GatewayEntityBuilder;


/**
 *
 * @author Martin Horn, University of Konstanz
 */
@ThriftStruct(builder = T${name}Builder.class)
public class T${name} {

#macro(type)
#if($field.getType().isList())
List<$field.getType().getType()>#else
$field.getType().getType()#end
#end

#macro(ttype $t)
#set($n = $t.getName())
#if(!$t.isPrimitive())#set($n = "T$n")#end
#if($field.getType().isList())
List<$n>#else
$n#end
#end

#foreach( $field in $fields )
	private #ttype($field.getType()) m_$field.getName();
#end

    /**
     * @param builder
     */
    private T${name}(final T${name}Builder builder) {
#foreach( $field in $fields )
		m_$field.getName() = builder.m_$field.getName();
#end
    }
    
    protected T${name}() {
    	//
    }

#foreach( $field in $fields )
    @ThriftField($foreach.count)
    public #ttype($field.getType()) get$field.getName()() {
        return m_$field.getName();
    }
    
#end

	public static T${name}Builder builder() {
		return new T${name}Builder();
	}
	
    public static class T${name}Builder implements ThriftEntityBuilder<${name}> {
    
#foreach( $field in $fields )
		private #ttype($field.getType()) m_$field.getName();
#end

        @ThriftConstructor
        public T${name} build() {
            return new T${name}(this);
        }
        
        @Override
        public GatewayEntityBuilder<${name}> wrap() {
            return new T${name}BuilderFromThrift(this);
        }

#foreach( $field in $fields )
        @ThriftField
        public T${name}Builder set$field.getName()(final #ttype(${field.getType()}) $field.getName()) {
			m_$field.getName() = $field.getName();			
            return this;
        }
        
#end
    }

}
