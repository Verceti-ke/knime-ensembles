<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="treeensemble_learner_regression.png" type="Learner">
	<name>Simple Regression Tree Learner</name>

	<shortDescription>
		Learns a single regression tree.
	</shortDescription>

	<fullDescription>
		<intro>
			<p>
				Learns a single regression tree. The procedure follows the algorithm
				described in CART
				("Classification and Regression Trees", Breiman et al, 1984), whereby the current
				implementation applies a
				couple of simplifications, e.g. no pruning, not necessarily binary trees,
				etc.
			</p>
			<p>
				The currently used missing value handling also differs from the one
				used in CART.
				In each split the algorithm tries to find the best direction for
				missing values by sending them in each direction and selecting
				the one that yields the best result (i.e. largest gain). The procedure
				is adapted from the well known XGBoost algorithm and is described
				<a href="https://github.com/dmlc/xgboost/issues/21">here</a>
				.
			</p>
		</intro>
		<tab name="Attribute Selection">
			<option name="Target Column">
				Select the column containing the value to be learned. Rows with missing
				values in this column will be ignored
				during the learning process.
			</option>
			<option name="Attribute Selection">
				<p>Select the attributes to use learn the model. Two variants are
					possible.</p>
				<p>
					<i>Fingerprint attribute</i>
					uses the different bit/count/double positions in the selected bit/byte/double
					vector as learning
					attributes (for instance a bit/byte/double vector of length 1024 is expanded to 1024
					binary/count/double attributes). All bit/byte/double vectors
					in the selected column must have the same length.
				</p>
				<p>
					<i>Column attributes</i>
					are nominal and numeric columns used as descriptors. Numeric
					columns are split in a
					&lt;= fashion; nominal columns can be split by creating child
					nodes for each of the values or by using set based binary splits.
				</p>
			</option>
			<option name="Ignore columns without domain information">
				If selected, nominal columns with no domain information are ignored
				(as they likely have too many possible
				values anyway).
			</option>
			<option name="Enable Hightlighting (#patterns to store)">
				If selected, the node stores the selected number of rows and allows
				highlighting them in the node view.
			</option>
			<option name="Use binary splits for nominal attributes">
				If selected, the node determines set based binary splits for nominal values.
				Otherwise each value will result in a child node.
			</option>
			<option name="Limit number of levels (tree depth)">
				Number of tree levels to be learned. For instance, a value of 1 would only
				split the (single) root node
				(decision stump).
			</option>
			<option name="Minimum split node size">Minimum number of records in a decision tree node
				so that another split
				is attempted. Note, this option does not make any implications on the
				minimum number of records in a
				terminal node. If enabled, this number needs to be at least twice as large
				as the minimum child node size
				(as otherwise for binary splits one of the two children would have less
				records than specified).
			</option>
			<option name="Minimum node size">Minimum number of records in child nodes. It can
				be at most half of
				the minimum split node size (see above). Note, this parameter is
				currently ignored for nominal splits.
			</option>
		</tab>
	</fullDescription>
	<ports>
		<inPort index="0" name="Input Data">The data to learn from. It must contain
			at least one numeric target column and
			either a fingerprint (bit/byte/double-vector) column or another numeric or
			nominal column.
		</inPort>
		<outPort index="0" name="Regression Tree Model">The trained model.</outPort>
	</ports>
</knimeNode>
